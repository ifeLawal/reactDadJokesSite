{"version":3,"sources":["serviceWorker.js","reducers/quotes.js","reducers/index.js","DadJokesPage.js","actions/index.js","data/index.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","counter","quotes","quotesReducerNew","state","action","obj","type","Object","assign","quote","text","author","newStateIncreased","length","newStateDecreased","colorList","randInt","Math","floor","random","updateColor","$","animate","backgroundColor","opacity","this","borderColor","color","document","ready","DadJokesPage","props","userCanAddQuote","nextQuote","bind","prevQuote","tweet","encodeURIComponent","quoteMaster","tumblr","id","className","href","onClick","React","Component","connect","index","dispatch","quoteData","ajax","headers","Accept","url","success","jsonQuotes","JSON","parse","then","max","console","log","store","createStore","rootReducer","getState","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c6addb50.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n// the state that I currently work with looks like this \n// state = { quotesReducerNew: { counter:0, quotes:[] } }\n\n// the initial state object below is ideally what the state object should look like\n// accessing counter and the array of quotes directly rather than through quotesReducerNew\nconst initialState = {\n    counter: 0,\n    quotes: []\n}\n\n// an attempt to start with two seperate reducers that would be combined\n// this reducer held quote and quote master data\n// still considering if this method is possible\n// const quotesReducer = (state = [], action) => {\n//     switch(action.type) {\n//         case 'ADD_QUOTE':\n//             return [...state, {\n//                 quote: action.text,\n//                 quoteMaster: action.quoteMaster\n//             }];\n//         default:\n//             return state;\n//     }\n// }\n\n// self combined reducer that handles counter increments and decrement aka going\n// from next quote and previous quote\n// as well as the future functionality of a user adding quotes\nconst quotesReducerNew = (state = initialState, action) => {\n    let obj = state.quotesReducerNew;\n    switch(action.type) {\n        case 'ADD_QUOTE':\n            return Object.assign({}, state, {\n                quotesReducerNew: {\n                    quotes: [\n                        ...state.quotes,\n                        {\n                            quote: action.text,\n                            author: action.author\n                        }\n                    ]\n                }\n            });\n        // state is constructed incorrectly as an object that points to\n        // quotesReducerNew, that's why the obj variable points to\n        // quotesReducerNew which has the counter and quotes array data.\n        // This mimicks the initial that's passed in the store in src/index.js\n        // which uses quotesReducerNew and is passed the data obj from data/index.js\n        case 'INCREMENT':\n            const newStateIncreased = obj.counter + 1 >= obj.quotes.length ? Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: 0,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }) : Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.counter + 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }) ;\n            return newStateIncreased;\n        case 'DECREMENT':\n            const newStateDecreased = obj.counter - 1 < 0 ? Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.quotes.length - 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }): Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.counter - 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }); \n            return newStateDecreased;\n        default:\n            return state;\n    }\n}\n\nexport default quotesReducerNew;","import { combineReducers } from 'redux'\nimport counterReducer from './counter'\nimport quotesReducerNew from './quotes'\n\n// rewrite this as a single reducer so you can access array length\n// export default combineReducers({\n//     counterReducer,\n//     quotesReducerNew\n// })\n\nexport default quotesReducerNew;","import React, { Fragment } from 'react'\n// import React from 'react-dom'\n// import { BrowserRouter as Router, Route, Link, Switch, Redirect, } from 'react-router-dom';\nimport { connect } from 'react-redux'\nimport $ from 'jquery'\nimport 'jquery/jquery.color'\nimport './index.css'\nimport './style.scss'\nimport {nextQuote, prevQuote} from './actions'\n\n\n// list of colors for the background, text, and icons on the page\nlet colorList = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32', '#BDBB99', '#77B1A9', '#73A857'];\n\n// rand integer used to select a random color\nlet randInt = Math.floor(Math.random() * Math.floor(colorList.length));\n\n// function to update colors for the quote-section (which covers the whole page)\n// the icons, and the text. Animate allows it to ease onto the page\nfunction updateColor () {\n    randInt = Math.floor(Math.random() * Math.floor(colorList.length));\n      $('#quote-section').animate({\n          backgroundColor: colorList[randInt],\n          },1000\n        );\n      $('.quote-button').animate(\n        { opacity: 0},\n        500,\n        function() {\n            $(this).animate({ opacity: 1, backgroundColor: colorList[randInt], borderColor: colorList[randInt]}, 250)\n          }\n      );\n      $('.icon').animate(\n        {opacity: 0},\n        500,\n        function() {\n            $(this).animate({ opacity: 1, color: colorList[randInt]}, 500)\n          }\n      );\n      $(\"#quote-text\").animate(\n        { opacity: 0, color: colorList[randInt] },\n        500,\n        function() {\n          $(this).animate({ opacity: 1}, 500)\n        });\n      $(\"#quote-master\").animate(\n        { opacity: 0, color: colorList[randInt] },\n        500,\n        function() {\n          $(this).animate({ opacity: 1}, 500)\n        });\n}\n\n// call update color on the first page load\n$(document).ready(function () {\n    updateColor();\n});\n\n\n// To do:\n// add quote functionality\n// add a toggle to allow people to add their own quote\n// add auto quote toggle\n// \n\n// class that renders quotes onto the page\n// using redux state and actions\nclass DadJokesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userCanAddQuote: false,\n        }\n\n        this.nextQuote = this.nextQuote.bind(this);\n        this.prevQuote = this.prevQuote.bind(this);\n    }\n\n    prevQuote() {\n        this.props.prevQuote();\n        updateColor();\n    }\n\n    nextQuote() {\n        this.props.nextQuote();\n        updateColor();\n    }\n\n    render() {\n        let tweet = 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"'+ this.props.quote + '\"' + this.props.quoteMaster);\n        let tumblr = 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' + encodeURIComponent(this.props.quoteMaster) + '&content=' + encodeURIComponent(this.props.quote) +'&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button';\n        return (\n            <section id=\"quote-section\">\n                <div className=\"container h-100\">\n                    \n                    <div className=\"row h-100 justify-content-center align-items-center\">\n                    <div className=\"row justify-content-center\"> A simple random quote machine. The icons allow you to share the wisdom! </div>\n                        <div className=\"row\">\n                            <div className=\"col text-center\">\n                                <div id=\"quote-block\" className=\"ml-auto mr-auto \">\n\n                                    <div id=\"quote-text\"><span className=\"fas fa-quote-left icon\"></span> {this.props.quote}</div>\n                                    <div className=\"d-flex justify-content-end p-3\">\n                                        <div id=\"quote-master\" className=\"mt-3\">- {this.props.quoteMaster} </div>\n                                    </div>\n                                    <div className=\"mt-4 d-flex align-items-center flex-wrap\">\n                                        <div className=\"col-12 col-sm-6\">\n                                            <div className=\"d-flex justify-content-start\">\n                                                <a href={tweet}><i className=\"fab fa-twitter-square icon\"></i></a>\n                                                <a href={tumblr}><i className=\"ml-2 fab fa-tumblr-square icon\"></i></a>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-12 col-sm-6\">\n                                            <div className=\"d-flex justify-content-end\">\n                                                <button id=\"prev-quote\" className=\"btn btn-primary quote-button\" onClick={this.prevQuote}>Prev</button>\n                                                <button id=\"next-quote\" className=\"ml-3 btn btn-primary quote-button\" onClick={this.nextQuote}>Next</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div className=\"row\">\n                            by Ife Lawal.\n                           \n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\n// built in redux function to provide redux state as props to the react class\nconst mapStateToProps = (state) => {\n        const index = state.quotesReducerNew.counter;\n        return {\n            quote: state.quotesReducerNew.quotes[index].quote,\n            quoteMaster: state.quotesReducerNew.quotes[index].author,\n            counter: state.quotesReducerNew.counter\n        }\n}\n\n// built in redux function to provide redux actions as functions to the react class\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        nextQuote: () => {\n            dispatch(nextQuote());\n        },\n        prevQuote: () => {\n            dispatch(prevQuote());\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DadJokesPage);","export const nextQuote = () => ({\n    type: 'INCREMENT'\n})\n\nexport const prevQuote = () => ({\n    type: 'DECREMENT'\n})","import $ from 'jquery'\n\n// get a random integer\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n  \n// get a random index position to pull the first quote and set that as the object\n\n  \nlet quotes = [\n    {\n        quote: \"Life isn’t about getting and having, it’s about giving and being.\",\n        author: \"Kevin Kruse\"\n    },\n    {\n        quote: \"Strive not to be a success, but rather to be of value.\",\n        author: \"Albert Einstein\"\n    },\n    {\n        quote: \"Whatever the mind of man can conceive and believe, it can achieve.\",\n        author: \"Napoleon Hill\"\n    },\n\n];\n\nlet quoteData = {\n    counter: 0,\n    quotes,\n}\n\nfunction getQuotesFromURL () { \n    return $.ajax(\n        {\n            headers: {\n                Accept: 'applications/json'\n            },\n            url: 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json',\n            success: function(jsonQuotes) {\n                if(typeof jsonQuotes === 'string') {\n                    quotes = JSON.parse(jsonQuotes);\n                } else {\n                    quotes = jsonQuotes.quotes;\n                }\n            }\n        }\n    )\n}\n\n// typical ajax function\n// function ajaxcall(url, data, callback) {\n//     $.ajax({\n//         url: url, // server url\n//         type: 'POST', //POST or GET \n//         data: data, // data to send in ajax format or querystring format\n//         datatype: 'json',\n//         beforeSend: function() {\n//             alert('sending data');\n//             // do some loading options\n//         },\n//         success: function(data) {\n//             callback(data); // return data in callback\n//         },\n \n//         complete: function() {\n//             alert('ajax call complete');\n//             // success alerts\n//         },\n \n//         error: function(xhr, status, error) {\n//             alert(xhr.responseText); // error occur \n//         }\n \n//     });\n// }\n\ngetQuotesFromURL().then(() => {\n        quoteData.quotes = quotes.quotes;\n        quoteData.counter = getRandomInt(quotes.quotes.length);\n        console.log(quoteData.counter);\n    }\n);\n\nlet dadJokesData = {\n    counter: 0,\n    dadJokes:[\n    {\n        quote: \"Life isn’t about getting and having, it’s about giving and being.\",\n        quoteMaster: \"Kevin Kruse\"\n    },\n    {\n        quote: \"Strive not to be a success, but rather to be of value.\",\n        quoteMaster: \"Albert Einstein\"\n    },\n    {\n        quote: \"Whatever the mind of man can conceive and believe, it can achieve.\",\n        quoteMaster: \"Napoleon Hill\"\n    },\n\n]}\n\nexport { quoteData };","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Container from './reduxReact'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport DadJokesPage from './DadJokesPage';\nimport {quoteData} from './data'\n\nconsole.log(quoteData.counter);\n// set up the redux store and give it a starting state with the populated quotes\nconst store = createStore(rootReducer, {\n  quotesReducerNew: quoteData\n});\n\n// debug the state of the store\nconsole.log(store.getState());\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <DadJokesPage />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}