{"version":3,"sources":["serviceWorker.js","reducers/counter.js","reducers/quotes.js","reducers/index.js","DadJokesPage.js","data/index.js","index.js"],"names":["Boolean","window","location","hostname","match","counterReducer","state","action","type","quotesReducer","quote","text","quoteMaster","combineReducers","$","document","ready","colorList","randInt","Math","floor","random","length","css","DadJokesPage","props","userCanAddQuote","addQuote","bind","newQuote","id","className","this","href","onClick","React","Component","connect","quoteData","max","startingQuoteIndex","store","createStore","rootReducer","console","log","getState","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"wPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCPSC,EAXQ,WAAwB,IAAvBC,EAAsB,uDAAd,EAAGC,EAAW,uCAC1C,OAAOA,EAAOC,MACV,IAAK,YACD,OAAOF,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,QACI,OAAOA,I,QCKJG,EAZO,WAAyB,IAAxBH,EAAuB,uDAAf,GAAIC,EAAW,uCAC1C,OAAOA,EAAOC,MACV,IAAK,YACD,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACdI,MAAOH,EAAOI,KACdC,YAAaL,EAAOK,eAE5B,QACI,OAAON,ICJJO,cAAgB,CAC3BR,iBACAI,kB,mECEJK,IAAEC,UAAUC,OAAM,WACd,IAAIC,EAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACtIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMH,EAAUK,SAC9DR,IAAE,kBAAkBS,IAAI,mBAAmBN,EAAUC,IACrDJ,IAAE,qBAAqBS,IAAI,mBAAmBN,EAAUC,IACxDJ,IAAE,SAASS,IAAI,QAAQN,EAAUC,O,IAS/BM,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDnB,MAAQ,CACToB,iBAAiB,GAGrB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAPD,E,6HAmBf,OACI,6BAASE,GAAG,iBACR,yBAAKC,UAAU,mBAEX,yBAAKA,UAAU,uDACf,yBAAKA,UAAU,8BAAf,+DACI,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,yBAAKD,GAAG,cAAcC,UAAU,oBAE5B,yBAAKA,UAAU,IAAG,0BAAMA,UAAU,iCAAlC,IAA0EC,KAAKP,MAAMf,OACrF,yBAAKqB,UAAU,8BACX,yBAAKD,GAAG,eAAeC,UAAU,QAAjC,KAA2CC,KAAKP,MAAMb,YAAtD,MAEJ,yBAAKmB,UAAU,6BACX,yBAAKA,UAAU,SACX,uBAAGE,KAAK,IAAG,uBAAGF,UAAU,sCACxB,uBAAGE,KAAK,IAAG,uBAAGF,UAAU,2CAE5B,yBAAKA,UAAU,SACX,4BAAQD,GAAG,mBAAmBC,UAAU,kBAAkBG,QAASF,KAAKL,UAAxE,kBAOpB,yBAAKI,UAAU,OAAf,0C,GA/CGI,IAAMC,WAmElBC,eATS,SAAC/B,GACrB,MAAO,CACHI,MAAOJ,EAAMG,cAAcH,EAAMD,gBAAgBK,MACjDE,YAAaN,EAAMG,cAAcH,EAAMD,gBAAgBO,eAMhDyB,CAAyBb,GCzFpCc,EAAY,CACZ,CACI5B,MAAO,8EACPE,YAAa,eAEjB,CACIF,MAAO,yDACPE,YAAa,mBAEjB,CACIF,MAAO,qEACPE,YAAa,kBCGrB,IAJsB2B,EAIhBC,GAJgBD,EAIkBD,EAAUhB,OAHzCH,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMmB,KAIzCE,EAAQC,YAAYC,EAAa,CACrCtC,eAAgBmC,EAChB/B,cAAe6B,IAGjBM,QAAQC,IAAIJ,EAAMK,YAElBC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEF1B,SAASkC,eAAe,SNyGpB,kBAAmBC,WACrBA,UAAUC,cAAcnC,MACrBoC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMC,c","file":"static/js/main.1f4883fe.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const counterReducer = (state = 0, action) => {\n    switch(action.type) {\n        case 'INCREMENT':\n            return state + 1;\n        case 'DECREMENT':\n            return state - 1;\n        default:\n            return state;\n    }\n}\n\nexport default counterReducer;","const quotesReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_QUOTE':\n            return [...state, {\n                quote: action.text,\n                quoteMaster: action.quoteMaster\n            }];\n        default:\n            return state;\n    }\n}\n\nexport default quotesReducer;","import { combineReducers } from 'redux'\nimport counterReducer from './counter'\nimport quotesReducer from './quotes'\n\nexport default combineReducers({\n    counterReducer,\n    quotesReducer\n})","import React, { Fragment } from 'react'\n// import React from 'react-dom'\n// import { BrowserRouter as Router, Route, Link, Switch, Redirect, } from 'react-router-dom';\nimport { connect } from 'react-redux'\nimport $ from 'jquery'\nimport './index.css'\nimport './style.scss'\n\n$(document).ready(function () {\n    let colorList = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32', '#BDBB99', '#77B1A9', '#73A857'];\n    let randInt = Math.floor(Math.random() * Math.floor(colorList.length));\n    $('#quote-section').css(\"background-color\",colorList[randInt]);\n    $('#new-quote-button').css(\"background-color\",colorList[randInt]);\n    $('.icon').css(\"color\",colorList[randInt]);\n});\n\n\n// To do:\n// add quote functionality\n// add a toggle to allow people to add their own quote\n// add auto quote toggle\n// \nclass DadJokesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userCanAddQuote: false,\n        }\n\n        this.addQuote = this.addQuote.bind(this);\n        this.newQuote = this.newQuote.bind(this);\n    }\n\n    addQuote() {\n        \n    }\n\n    newQuote() {\n\n    }\n\n    render() {\n        return (\n            <section id=\"quote-section\">\n                <div className=\"container h-100\">\n                    \n                    <div className=\"row h-100 justify-content-center align-items-center\">\n                    <div className=\"row justify-content-center\"> This will soon have dad jokes but for now here is a quote:</div>\n                        <div className=\"row\">\n                            <div className=\"col text-center\">\n                                <div id=\"quote-block\" className=\"ml-auto mr-auto \">\n\n                                    <div className=\"\"><span className=\"fas fa-quote-left fa-2x icon\"></span> {this.props.quote}</div>\n                                    <div className=\"d-flex justify-content-end\">\n                                        <div id=\"quote-master\" className=\"mt-3\">- {this.props.quoteMaster} </div>\n                                    </div>\n                                    <div className=\"d-flex align-items-center\">\n                                        <div className=\"col-6\">\n                                            <a href=\"\"><i className=\"fab fa-twitter-square fa-2x icon\"></i></a>\n                                            <a href=\"\"><i className=\"ml-2 fab fa-tumblr-square fa-2x icon\"></i></a>\n                                        </div>\n                                        <div className=\"fa-2x\">\n                                            <button id=\"new-quote-button\" className=\"btn btn-primary\" onClick={this.addQuote}>New Quote</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div className=\"row\">\n                            by Ife Lawal. New Auto quote in \n                           \n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        quote: state.quotesReducer[state.counterReducer].quote,\n        quoteMaster: state.quotesReducer[state.counterReducer].quoteMaster,\n    };\n}\n\n\n\nexport default connect(mapStateToProps)(DadJokesPage);","let quoteData = [\n    {\n        quote: \"Life isn’t about getting and having, it’s about giving and being.\",\n        quoteMaster: \"Kevin Kruse\"\n    },\n    {\n        quote: \"Strive not to be a success, but rather to be of value.\",\n        quoteMaster: \"Albert Einstein\"\n    },\n    {\n        quote: \"Whatever the mind of man can conceive and believe, it can achieve.\",\n        quoteMaster: \"Napoleon Hill\"\n    },\n\n]\n\nexport {quoteData};","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Container from './reduxReact'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport DadJokesPage from './DadJokesPage';\nimport {quoteData} from './data'\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst startingQuoteIndex = getRandomInt(quoteData.length);\nconst store = createStore(rootReducer, {\n  counterReducer: startingQuoteIndex,\n  quotesReducer: quoteData\n});\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n    <DadJokesPage />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}