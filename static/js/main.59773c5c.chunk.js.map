{"version":3,"sources":["serviceWorker.js","reducers/quotes.js","reducers/index.js","DadJokesPage.js","actions/index.js","data/index.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","counter","quotes","quotesReducerNew","state","action","obj","type","Object","assign","quote","text","quoteMaster","author","newStateIncreased","length","newStateDecreased","$","document","ready","colorList","randInt","Math","floor","random","css","DadJokesPage","props","userCanAddQuote","nextQuote","bind","prevQuote","this","tweet","encodeURIComponent","tumblr","id","className","href","onClick","React","Component","connect","index","dispatch","quoteData","max","startingQuoteIndex","store","createStore","rootReducer","console","log","getState","ReactDOM","render","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59773c5c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// creates an array object that stores a quote object that contains the quote\n\nimport { Switch } from \"react-router-dom\";\n\n// the state currently looks like this \n// state = {quotesReducerNew: { counter:0, quotes:[] } }\n// the initial state object below is ideally what the state object should look like\n// accessing counter and the array of quotes directly\nconst initialState = {\n    counter: 0,\n    quotes: []\n}\n\n// text and author\nconst quotesReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_QUOTE':\n            return [...state, {\n                quote: action.text,\n                quoteMaster: action.quoteMaster\n            }];\n        default:\n            return state;\n    }\n}\n\n// object structure\n// {counter: int, array[{quotes:str,quotemaster:str}]}\nfunction wrapCounterInObject(obj, num) {\n    if(obj.array.length < num) {\n       return Object.assign({}, [...obj], {\n        counter: 0,\n       });\n    } else if(num < 0) {\n        return Object.assign({}, {\n            counter: obj.array.length,\n        })\n    } else {\n        return Object.assign({}, {\n            counter: num,\n        });\n    }\n}\n\nconst quotesReducerNew = (state = initialState, action) => {\n    let obj = state.quotesReducerNew;\n    switch(action.type) {\n        case 'ADD_QUOTE':\n            return Object.assign({}, state, {\n                quotesReducerNew: {\n                    quotes: [\n                        ...state.quotes,\n                        {\n                            quote: action.text,\n                            quoteMaster: action.author\n                        }\n                    ]\n                }\n            });\n        // state is constructed incorrectly as an object that points to\n        // quotesReducerNew, that's why the obj variable points to\n        // quotesReducerNew which has the counter and quotes array data.\n        // This mimicks the initial that's passed in the store in src/index.js\n        // which uses quotesReducerNew and is passed the data obj from data/index.js\n        case 'INCREMENT':\n            const newStateIncreased = obj.counter + 1 >= obj.quotes.length ? Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: 0,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }) : Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.counter + 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }) ;\n            return newStateIncreased;\n        case 'DECREMENT':\n            const newStateDecreased = obj.counter - 1 < 0 ? Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.quotes.length - 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }): Object.assign({}, state, {\n                quotesReducerNew: {\n                    counter: obj.counter - 1,\n                    quotes: [\n                        ...obj.quotes,\n                    ]\n                }\n            }); \n            return newStateDecreased;\n        default:\n            return state;\n    }\n}\n\nexport default quotesReducerNew;","import { combineReducers } from 'redux'\nimport counterReducer from './counter'\nimport quotesReducerNew from './quotes'\n\n// rewrite this as a single reducer so you can access array length\n// export default combineReducers({\n//     counterReducer,\n//     quotesReducerNew\n// })\n\nexport default quotesReducerNew;","import React, { Fragment } from 'react'\n// import React from 'react-dom'\n// import { BrowserRouter as Router, Route, Link, Switch, Redirect, } from 'react-router-dom';\nimport { connect } from 'react-redux'\nimport $ from 'jquery'\nimport './index.css'\nimport './style.scss'\nimport {nextQuote, prevQuote} from './actions'\n\n$(document).ready(function () {\n    let colorList = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32', '#BDBB99', '#77B1A9', '#73A857'];\n    let randInt = Math.floor(Math.random() * Math.floor(colorList.length));\n    $('#quote-section').css(\"background-color\",colorList[randInt]);\n    $('#new-quote-button').css(\"background-color\",colorList[randInt]);\n    $('.icon').css(\"color\",colorList[randInt]);\n    $(\".quote-button\").css(\"background-color\", colorList[randInt]);\n});\n\n\n// To do:\n// add quote functionality\n// add a toggle to allow people to add their own quote\n// add auto quote toggle\n// \nclass DadJokesPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userCanAddQuote: false,\n        }\n\n        this.nextQuote = this.nextQuote.bind(this);\n        this.prevQuote = this.prevQuote.bind(this);\n    }\n\n    prevQuote() {\n        this.props.prevQuote();\n    }\n\n    nextQuote() {\n        this.props.nextQuote();\n    }\n\n    render() {\n        let tweet = 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"'+ this.props.quote + '\"' + this.props.quoteMaster);\n        let tumblr = 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' + encodeURIComponent('\"' + this.props.quote + '\"' + this.props.quoteMaster);\n        return (\n            <section id=\"quote-section\">\n                <div className=\"container h-100\">\n                    \n                    <div className=\"row h-100 justify-content-center align-items-center\">\n                    <div className=\"row justify-content-center\"> This will soon have dad jokes but for now here is a quote:</div>\n                        <div className=\"row\">\n                            <div className=\"col text-center\">\n                                <div id=\"quote-block\" className=\"ml-auto mr-auto \">\n\n                                    <div className=\"\"><span className=\"fas fa-quote-left icon\"></span> {this.props.quote}</div>\n                                    <div className=\"d-flex justify-content-end p-3\">\n                                        <div id=\"quote-master\" className=\"mt-3\">- {this.props.quoteMaster} </div>\n                                    </div>\n                                    <div className=\"mt-4 d-flex align-items-center flex-wrap\">\n                                        <div className=\"col-12 col-sm-6\">\n                                            <div className=\"d-flex justify-content-start\">\n                                                <a href={tweet}><i className=\"fab fa-twitter-square icon\"></i></a>\n                                                <a href={tumblr}><i className=\"ml-2 fab fa-tumblr-square icon\"></i></a>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-12 col-sm-6\">\n                                            <div className=\"d-flex justify-content-end\">\n                                                <button className=\"btn btn-primary quote-button\" onClick={this.prevQuote}>Prev</button>\n                                                <button className=\"btn btn-primary quote-button\" onClick={this.nextQuote}>Next</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        \n                        <div className=\"row\">\n                            by Ife Lawal. New Auto quote in \n                           \n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n        const index = state.quotesReducerNew.counter;\n        return {\n            quote: state.quotesReducerNew.quotes[index].quote,\n            quoteMaster: state.quotesReducerNew.quotes[index].quoteMaster,\n            counter: state.quotesReducerNew.counter\n        }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        nextQuote: () => {\n            dispatch(nextQuote());\n        },\n        prevQuote: () => {\n            dispatch(prevQuote());\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DadJokesPage);","export const nextQuote = () => ({\n    type: 'INCREMENT'\n})\n\nexport const prevQuote = () => ({\n    type: 'DECREMENT'\n})","import $ from 'jquery'\n\nlet quoteData = {\n    counter: 0,\n    quotes:[\n    {\n        quote: \"Life isn’t about getting and having, it’s about giving and being.\",\n        quoteMaster: \"Kevin Kruse\"\n    },\n    {\n        quote: \"Strive not to be a success, but rather to be of value.\",\n        quoteMaster: \"Albert Einstein\"\n    },\n    {\n        quote: \"Whatever the mind of man can conceive and believe, it can achieve.\",\n        quoteMaster: \"Napoleon Hill\"\n    },\n\n]}\n\nexport { quoteData };","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Container from './reduxReact'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport DadJokesPage from './DadJokesPage';\nimport {quoteData} from './data'\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst startingQuoteIndex = getRandomInt(quoteData.quotes.length);\nquoteData.counter = startingQuoteIndex;\nconst store = createStore(rootReducer, {\n  quotesReducerNew: quoteData\n});\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n    <DadJokesPage />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}